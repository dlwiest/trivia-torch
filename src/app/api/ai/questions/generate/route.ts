import { NextRequest, NextResponse } from 'next/server';
import { OpenAI } from 'langchain/llms/openai';
import { z } from 'zod';
import { StructuredOutputParser } from 'langchain/output_parsers';
import { PromptTemplate } from 'langchain/prompts';

interface RequestBody {
    topic: string;
    difficulty: string;
}

export async function POST(req: NextRequest) {
    const inputs = await req.json() as RequestBody;

    if (!inputs.topic || !inputs.difficulty) {
        return new NextResponse(JSON.stringify('Bad Request'), {
            status: 400,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }

    try {
        const response = await aiGenerateQuestions(inputs);
        if (!response.understoodTopic) {
            return new NextResponse(JSON.stringify('Invalid Topic'), {
                status: 400,
                headers: {
                    'Content-Type': 'application/json',
                },
            });
        }

        return new NextResponse(JSON.stringify(response.questions), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    } catch (error) {
        return new NextResponse(JSON.stringify('Error fetching questions from OpenAI'), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
}

async function aiGenerateQuestions({ topic, difficulty }: RequestBody) {
    const model = new OpenAI({
        modelName: 'gpt-4-turbo-preview',
        openAIApiKey: process.env.REACT_APP_OPEN_AI_KEY,
        temperature: 0.7,
    });

    const questionSchema = z.object({
        question: z.string().describe('The question itself'),
        answer: z.string().describe('The answer to the question'),
    });

    const openAIResponseSchema = z.object({
        understoodTopic: z.boolean().describe('Whether the AI understood the topic'),
        questions: z.array(questionSchema).describe('The questions generated by AI'),
    });

    const parser = StructuredOutputParser.fromZodSchema(openAIResponseSchema);
    const formatInstructions = parser.getFormatInstructions();

    const prompt = new PromptTemplate({
        template: `Generate five trivia questions about {topic} that fit the following difficulty criteria: 
    - Easy: Common knowledge for anyone familiar with the topic.
    - Medium: Requires more in-depth knowledge, likely from those who have studied the topic or engaged with it significantly.
    - Hard: Details that are typically only known by experts or enthusiasts deeply involved in the field.

    For this request, the difficulty of questions should be: {difficulty}
    
    Ensure each question comes with a correct answer. All information, including answers and any distractors, must be factually accurate and verified against reliable sources. After generating the questions, verify each for accuracy. If there's any doubt about correctness, replace it with a new question.
    
    \n\n{format_instructions}`,
        inputVariables: ['difficulty', 'topic'],
        partialVariables: { format_instructions: formatInstructions },
    });

    const input = await prompt.format({
        difficulty,
        topic,
    });

    try {
        const response = await model.call(input);
        const parsed = parser.parse(response);
        return parsed;
    } catch (e) {
        console.error(e);
        throw Error();
    }
}