import { NextRequest, NextResponse } from 'next/server';
import { OpenAI } from 'langchain/llms/openai';
import { z } from 'zod';
import { StructuredOutputParser } from 'langchain/output_parsers';
import { PromptTemplate } from 'langchain/prompts';

interface RequestBody {
    topic: string;
    difficulty: string;
}

export async function POST(req: NextRequest) {
    const inputs = await req.json() as RequestBody;

    if (!inputs.topic || !inputs.difficulty) {
        return new NextResponse(JSON.stringify('Bad Request'), {
            status: 400,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }

    try {
        const response = await aiGenerateQuestions(inputs);
        if (!response.understoodTopic) {
            return new NextResponse(JSON.stringify('Invalid Topic'), {
                status: 400,
                headers: {
                    'Content-Type': 'application/json',
                },
            });
        }

        return new NextResponse(JSON.stringify(response.questions), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    } catch (error) {
        return new NextResponse(JSON.stringify('Error fetching questions from OpenAI'), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
}

async function aiGenerateQuestions({ topic, difficulty }: RequestBody) {
    const model = new OpenAI({
        modelName: 'gpt-4',
        openAIApiKey: process.env.REACT_APP_OPEN_AI_KEY,
        temperature: 0.7,
    });

    const questionSchema = z.object({
        question: z.string().describe('The question itself'),
        answer: z.string().describe('The answer to the question'),
    });

    const openAIResponseSchema = z.object({
        understoodTopic: z.boolean().describe('Whether the AI understood the topic'),
        questions: z.array(questionSchema).describe('The questions generated by AI'),
    });

    const parser = StructuredOutputParser.fromZodSchema(openAIResponseSchema);
    const formatInstructions = parser.getFormatInstructions();

    const prompt = new PromptTemplate({
        template: `Generate five trivia questions about {topic} with a {difficulty} difficulty level. Provide the correct answer for each question. It's crucial that all provided information, including the correct answers and the distractors, are factually accurate and verified against reliable sources. After generating the questions, please verify each individually for accuracy, and if there’s any doubt that it’s correct, omit it and generate a new one to replace it.\n\n{format_instructions}`,
        inputVariables: ['difficulty', 'topic'],
        partialVariables: { format_instructions: formatInstructions },
    });

    const input = await prompt.format({
        difficulty,
        topic,
    });

    try {
        const response = await model.call(input);
        const parsed = parser.parse(response);
        return parsed;
    } catch (e) {
        console.error(e);
        throw Error();
    }
}